namespace tf {

/** @page chapter7 C7: %Framework (Experimental)

In many situations, you will need to execute a task dependency multiple times to
create a @em reusable, @em stateful, and @em decomposable execution flow.
tf::Framework is designed for this purpose. 
This chapter introduces the concept of a framework and shows its usage.

@section C7_CreateAFramework Create a Framework 

The tf::Framework inherits tf::FlowBuilder and contains a task dependency graph 
that is independent of a taskflow object.
Executing a framework from a taskflow does not make the graph vanish.
You can reuse a framework multiple times.
The following example demonstrates how to create a framework.

@code{.cpp}
// create a framework 
tf::Framework framework;

// create three tasks in the framework
tf::Task A = framework.emplace([](){ std::cout << "This is TaskA\n"; });
tf::Task B = framework.placeholder();

// add a dependency link from A to B
A.precede(B);  
@endcode

Each framework represents a unique task dependency graph.
Connecting tasks from different frameworks results in undefined behavior
and should be avoided.

@code{.cpp}
tf::Taskflow taskflow;

tf::Framework f1, f2;

tf::Task A = f1.emplace([] () { std::cout << "task of framework 1\n"; });
tf::Task B = f2.emplace([] () { std::cout << "task of framework 2\n"; });

// connecting tasks from different frameworks results in undefined behaviors
A.precede(B);
taskflow.run(f1);
@endcode


@section C7_ExecuteAFramework Execute a Framework

You use one of following methods:
tf::Taskflow::run, 
tf::Taskflow::run_n, or tf::Taskflow::run_until to run a framework
for one time, multiple times, or until a given condition is met.
All methods accept an optional callback to invoke after the execution completes.
The code below shows several ways to run a framework.

@code{.cpp}
 1: // Declare a framework 
 2: tf::Framework f;
 3: 
 4: // Add three tasks into the framework
 5: auto [A, B, C] = f.emplace(
 6:   [] () { std::cout << "This is TaskA\n"; },
 7:   [] () { std::cout << "This is TaskB\n"; },
 8:   [] () { std::cout << "This is TaskC\n"; },
 9: );
10: 
11: // Build precedence between tasks
12: A.precede(B, C); 
13: 
14: // Declare a taskflow object
15: tf::Taskflow taskflow;
16: 
17: auto fu = taskflow.run(f);
18: fu.get();
19: taskflow.run(f, [](){ std::cout << "end of one execution\n"; }).get();
20: 
21: taskflow.run_n(f, 4);
22: taskflow.wait_for_all();
23: 
24: taskflow.run_n(f, 4, [](){ std::cout << "end of four executions\n"; }).get();
25:
26: taskflow.run_until(f, [int cnt=0] () mutable { return (++cnt == 10); });
@endcode


Debrief:

@li Line 1-12  creates a framework of three tasks A, B, and C
@li Line 15    creates a taskflow object
@li Line 17-18 runs the framework once and use std::shared_future::get to wait for completion 
@li Line 19 runs the framework once with a callback to invoke when the execution finishes
@li Line 21-22 runs the framework four times and use tf::Taskflow::wait_for_all to wait for completion 
@li Line 24    runs the framework four times and invokes a callback at the end of the forth execution
@li Line 26    keeps running the framework until the @c cnt variable becomes 10

Each framework has its own task dependency graph.
You should ensure each framework run by only one taskflow at one time.

@code{.cpp}
 1: // Declare a framework 
 2: tf::Framework f;
 3: 
 4: // Running a framework on two taskflows at the same time gives undefined behavior
 5: tf::Taskflow taskflow1, taskflow2;
 6: taskflow1.run(f);
 7: taskflow2.run(f);
@endcode

Multiple runs on a framework from a taskflow will be @em synchronized.
The following example sequentially creates three topologies
that run a framework for one, ten, and one times, respectively.

@code{.cpp}
 1: // Declare a framework 
 2: tf::Framework f;
 3: 
 4: // Running a framework on two taskflows at the same time gives undefined behavior
 5: tf::Taskflow taskflow;
 6: taskflow.run(f);  
 7: taskflow.run_n(f, 10);
 8: taskflow.run(f);
 9: taskflow.wait_for_all();
@endcode

@section C7_VisualizeAFramework Visualize a Framework

Similar to a task, you can name a framework and dump it to a DOT format.

@code{.cpp}
 1: tf::Taskflow tf;
 2:
 3: // create a framework
 4: tf::Framework f;
 5:
 6: // name the framework
 7: f.name("Demo");
 8:
 9: auto A = f.emplace([&](){ std::cout << "TaskA\n"; }).name("A");
10: auto B = f.emplace([&](auto& subflow){
11:   std::cout << "TaskB\n";
12:   auto B1 = subflow.emplace([&](){ std::cout << "TaskB1\n"; }).name("B1");
13:   auto B2 = subflow.emplace([&](){ std::cout << "TaskB2\n"; }).name("B2");
14:   auto B3 = subflow.emplace([&](){ std::cout << "TaskB3\n"; }).name("B3");
15:   B1.precede(B3);
16:   B2.precede(B3);
17: }).name("B");
18:
19: auto C = f.emplace([&](){ std::cout << "TaskC\n"; }).name("C");
20: auto D = f.emplace([&](){ std::cout << "TaskD\n"; }).name("D");
21:
22: A.precede(B, C);
23: B.precede(D);
24: C.precede(D);
25:
26: // dump the framework (static portion only)
26: f.dump(std::cout);
@endcode

@image html images/framework_static_dump.png width=30%

The framework in this example contains a subflow.
You will need to run the framework first to spawn the subflow
before you can visualize the dynamic task nodes.

@code{.cpp}
 1: // run the framework and make sure it finishes before dump
 2: taskflow.run(f).get();
 3:
 4: // at this point the subflow graph is spawned
 5: f.dump(std::cout);
 6:
 7: // alternatively, you can dump the topology to obtain the same result
 8: taskflow.dump(std::cout);
@endcode

@image html images/framework_dynamic_dump.png width=40%


@section C7_LifeTimeOfAFramework Lifetime of a Framework

Since a taskflow object does not own a framework, 
a running framework must remain alive until its execution finishes. 
It is your responsibility to ensure a framework is not destructed
during it is running on a taskflow object.
For example, the code below can result undefined behavior.

@code{.cpp}

// create a taskflow object
tf::Taskflow taskflow;

// create a framework whose lifetime is restricted by the scope
{
  tf::Framework f;
  
  // add tasks into the framework 
  // ... 

  // run the framework
  taskflow.run(f);

} // destroy the framework without waiting for execution finishes will lead to undefined behavior

@endcode

Similarly, you should avoid touching a framework while it is running.

@code{.cpp}
tf::Framework f;

// Add tasks into the framework 
// ...

// Declare a taskflow object
tf::Taskflow taskflow;

auto future = taskflow.run(f);

// Modify the framework before the execution finishes leads to undefined behavior 
f.emplace([](){ std::cout << "Add a new task\n"; });

// Use get method to wait for the execution completes.
future.get();
@endcode


@section C7_CreateAppicationFramework Create an Application Framework
A useful feature of framework is that you can customize your own application framework by 
inheriting the tf::Framework class. By deriving from the tf::Framework, 
you can use the same task creation APIs 
to build a task dependency graph for your own application and call 
@c run_* methods to execute your framework. 

@code{.cpp} 
// Define a framework for your application
class Foo: public tf::Framework {
  // Define members data and functions
  std::vector<float> inputs;
  void set_inputs(std::vector<float>&);
  // ...
};

int main() {
  // Declare a taskflow object
  tf::Taskflow taskflow;

  // Declare an application framework
  Foo foo;

  // Use the task creation APIs to build the task dependency graph in application framework  
  tf::Task taskA = foo.emplace([](){ std::cout << "TaskA\n"; });
  tf::Task taskB = foo.emplace([](){ std::cout << "TaskB\n"; });
  taskA.precede(taskB); 

  // Dispatch your application framework
  taskflow.run(foo);

  taskflow.wait_for_all();

  return 0;
}
@endcode

@section C7_FrameworkDecomposition Framework Decomposition

A powerful feature of tf::Framework is its @em decomposable interface.
You can break down a large application framework into smaller pieces
each designed to run a specific task dependency graph.
This largely facilitates the @em modularity of writing a parallel task program.

@code{.cpp}
 1: // f1 has three independent tasks
 2: tf::Framework f1;
 3: auto [f1A, f1B, f1C] = f1.name("F1").emplace(
 4:   [&](){ std::cout << "F1 TaskA\n"; },
 5:   [&](){ std::cout << "F1 TaskB\n"; },
 6:   [&](){ std::cout << "F1 TaskC\n"; }
 7: );
 8: f1A.name("f1A");
 9: f1B.name("f1B");
10: f1C.name("f1C");
11: f1A.precede(f1C);
12: f1B.precede(f1C);
13:
14: // f2A ---
15: //        |----> f2C ----> f1_module_task ----> f2D
16: // f2B --- 
17: tf::Framework f2;
18: auto [f2A, f2B, f2C, f2D] = f2.name("F2").emplace(
19:   [&](){ std::cout << "  F2 TaskA\n"; },
20:   [&](){ std::cout << "  F2 TaskB\n"; },
21:   [&](){ std::cout << "  F2 TaskC\n"; },
22:   [&](){ std::cout << "  F2 TaskD\n"; }
23: );
24: f2A.name("f2A");
25: f2B.name("f2B");
26: f2C.name("f2C");
27: f2C.name("f2D");
28:
29: f2A.precede(f2C);
30: f2B.precede(f2C);
31:
32: auto f1_module_task = f2.composed_of(f1).name("module");
33: f2C.precede(f1_module_task);
34: f1_module_task.precede(f2D);
35:
36: f2.dump(std::cout);
37:
38: tf.run_n(f2, 3).get();
@endcode

@image html images/composition_static_1.png width=37%

Debrief:

@li Line 1-12  creates a framework of three tasks f1A, f1B, and f1C with f1A and f1B preceding f1C
@li Line 17-30 creates a framework of four tasks f2A, f2B, f2C, and f2D 
@li Line 32 creates a module task from framework f1 through the method Framework::composed_of
@li Line 33 enforces task f2C to run before the module task 
@li Line 34 enforces the module task to run before task f2D

The task created from Framework::composed_of is a @em module task
that runs on a framework.
A module task does not owns any framework but maintains a soft 
mapping to use during its execution context.
You can create multiple module tasks from the same framework
but only one module task can run at one time.
For example, the following decomposition is valid. 
Even though the two module tasks @c module1 and @c module2 refer to the same framework @c F1,
the dependency link prevents @c F1 from multiple executions at the same time.

@image html images/composition_static_2.png width=37%

However, the following decomposition is @em invalid.
Both module tasks refer to the same framework. They can not run at the same time because
they are associated with the same graph.

@image html images/composition_static_invalid.png width=50%




@section C7_Caveats Caveats

Although tf::Framework enables efficient reuse of a task dependency graph,
there can be many potential pitfalls. 
We are still experimenting tf::Framework to develop a safe interface. 
Please stay tuned with @ref master-branch.


*/

}


